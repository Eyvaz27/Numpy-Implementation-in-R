typeof(5L)=="integer"
typeof(5)=="integer"
T | T
T | F
F | F
library(numpy)
library(numpy)
numpy::linspace(1L, 10L)
library(numpy)
numpy::linspace(1L, 10L)
np$linspace(1L, 10L)
library(reticulate)
py_config()
# import numpy as np
np <- import('numpy')
linspace <- function(start, stop, num=50L, endpoint=T, retstep=F, dtype=NaN, axis=0L){
if(typeof(start)!='integer' | typeof(stop)!='integer' | typeof(num)!='integer'){
stop("Type Mismatch occured in input")}
else{
return(reticulate::py_to_r(np$linspace(start, stop, num, endpoint, retstep, dtype, axis)))
}
}
linspace(1L, 10L)
reticulate::r_to_py(NaN)
linspace <- function(start, stop, num=50L, endpoint=T, retstep=F, dtype=NaN, axis=0L){
if(typeof(start)!='integer' | typeof(stop)!='integer' | typeof(num)!='integer'){
stop("Type Mismatch occured in input")}
else{
return(reticulate::py_to_r(np$linspace(start, stop, num, endpoint, retstep, reticulate::r_to_py(dtype), axis)))
}
}
reticulate::r_to_py(NaN)
linspace(1L, 10L)
reticulate::r_to_py(NULL)
linspace <- function(start, stop, num=50L, endpoint=T, retstep=F, dtype=NULL, axis=0L){
if(typeof(start)!='integer' | typeof(stop)!='integer' | typeof(num)!='integer'){
stop("Type Mismatch occured in input")}
else{
return(reticulate::py_to_r(np$linspace(start, stop, num, endpoint, retstep, reticulate::r_to_py(dtype), axis)))
}
}
linspace(1L, 10L)
reticulate::r_to_py(NULL)
linspace <- function(start, stop, num=50L, endpoint=T, retstep=F, dtype=NULL, axis=0L){
if(typeof(start)!='integer' | typeof(stop)!='integer' | typeof(num)!='integer'){
stop("Type Mismatch occured in input")}
else{
return(reticulate::py_to_r(np$linspace(start, stop, num, endpoint, retstep, dtype, axis)))
}
}
linspace(1L, 10L)
reticulate::r_to_py(NULL)
class(reticulate::r_to_py(NULL))
linspace <- function(start, stop, num=50L, endpoint=T, retstep=F, dtype=NULL, axis=0L){
if(typeof(start)!='integer' | typeof(stop)!='integer' | typeof(num)!='integer'){
stop("Type Mismatch occured in input")}
else{
if(is.null(dtype))
return(reticulate::py_to_r(np$linspace(start, stop, num, endpoint, retstep, axis=axis)))
else{
return(reticulate::py_to_r(np$linspace(start, stop, num, endpoint, retstep, dtype, axis)))
}
}
}
linspace(1L, 10L)
is.null(NULL)
linspace <- function(start, stop, num=50L, endpoint=T, retstep=F, dtype=NULL, axis=0L){
if(typeof(start)!='integer' | typeof(stop)!='integer' | typeof(num)!='integer'){
stop("Type Mismatch occured in input")}
else{
if(is.null(dtype)){
return(reticulate::py_to_r(np$linspace(start, stop, num, endpoint, retstep, axis=axis)))
}
else{
return(reticulate::py_to_r(np$linspace(start, stop, num, endpoint, retstep, dtype, axis)))
}
}
}
linspace(1L, 10L)
linspace <- function(start, stop, num=50L, endpoint=T, retstep=F, dtype=NULL, axis=0L){
if(typeof(start)!='integer' | typeof(stop)!='integer' | typeof(num)!='integer'){
stop("Type Mismatch occured in input")}
else{
if(is.null(dtype)){
return(reticulate::py_to_r(np$linspace(start, stop, num, endpoint, retstep, axis=axis)))
}
else{
return(reticulate::py_to_r(np$linspace(start, stop, num, endpoint, retstep, reticulate::r_to_py(dtype), axis)))
}
}
}
linspace(1L, 10L)
linspace
linspace(1L, 10L)
linspace(1L, 10L)
linspace(1L, 10L)
linspace(1L, 10L)
library(numpy)
library(linspace)
linspace(1L, 10L)
library(reticulate)
py_config()
# import numpy as np
np <- import('numpy')
start <- 1L
stop <- 10L
np$linspace(start, stop)
np$linspace(start, stop, endpoint=T, retstep=T, axis=0L)
py_to_r(np$linspace(start, stop, endpoint=T, retstep=T, axis=0L))
library(numpy)
library(numpy)
library(numpy)
linspace(1L, 10L)
devtools::check()
library(numpy)
library(numpy)
reticulate::py_numpy_available()
reticulate::import("numpy")
# Sys.setenv("R_TESTS" = "")
# install.packages(reticulate)
library(reticulate)
library(devtools)
# library(testthat)
# py_config()
load_all()
# Sys.setenv("R_TESTS" = "")
# install.packages(reticulate)
library(reticulate)
library(devtools)
# library(testthat)
# py_config()
reticulate::py_config()
py_install("numpy")
reticulate::py_numpy_available()
np <- reticulate::import('numpy')
linspace <- function(start, stop, num=50L, endpoint=T, retstep=F, dtype=NULL, axis=0L){
if(typeof(start)!='integer' | typeof(stop)!='integer' | typeof(num)!='integer'){
stop("Type Mismatch occured in input")}
else{
if(is.null(dtype)){
return(np$linspace(start, stop, num, endpoint, retstep, axis=axis))
}
else{
return(np$linspace(start, stop, num, endpoint, retstep, reticulate::r_to_py(dtype), axis))
}
}
}
linspace(1L, 10L)
library(numpy)
library(numpy)
library(numpy)
library(numpy)
library(numpy)
library(numpy)
library(numpy)
library(help=linspace)
library(help=numpy)
